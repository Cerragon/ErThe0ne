#pragma once
#include <cstdint>

class PlayerStatsEditor
{
public:
	static bool Edit(bool enabled);

private:
	class ActorValueHook
	{
	public:
		unsigned char actorValueAsm[0x118]
		{
			0x8B, 0x42, 0x20,								//mov eax, [rdx+20]
			0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,	//nop (multi)
			0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,	//nop (multi)
			0x0F, 0x1F, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,	//nop (multi)
			0x0F, 0x1F, 0x00,								//nop (multi)
			0x3D, 0xD5, 0x02, 0x00, 0x00,					//cmp eax, 000002D5
			0x75, 0x14,										//jne StrengthCheck
			0x31, 0xC0,										//xor eax, eax
			0x3B, 0x05, 0xEB, 0x00, 0x00, 0x00,				//cmp eax, [ActionPointsEnabled]
			0x74, 0x0A,										//je StrengthCheck
			0xF3, 0x0F, 0x10, 0x15, 0xE5, 0x00, 0x00, 0x00,	//movss xmm2, [ActionPoints]
			0xEB, 0x19,										//jmp OriginalFunction
			0x3D, 0xC2, 0x02, 0x00, 0x00,					//cmp eax, 000002C2
			0x75, 0x14,										//jne PerceptionCheck
			0x31, 0xC0,										//xor eax, eax
			0x3B, 0x05, 0xD8, 0x00, 0x00, 0x00,				//cmp eax, [StrengthEnabled]
			0x74, 0x0A,										//je PerceptionCheck
			0xF3, 0x0F, 0x10, 0x15, 0xD2, 0x00, 0x00, 0x00,	//movss xmm2, [Strength]
			0xEB, 0x19,										//jmp OriginalFunction
			0x3D, 0xC3, 0x02, 0x00, 0x00,					//cmp eax, 000002C3
			0x75, 0x14,										//jne EnduranceCheck
			0x31, 0xC0,										//xor eax, eax
			0x3B, 0x05, 0xC5, 0x00, 0x00, 0x00,				//cmp eax, [PerceptionEnabled]
			0x74, 0x0A,										//je EnduranceCheck
			0xF3, 0x0F, 0x10, 0x15, 0xBF, 0x00, 0x00, 0x00,	//movss xmm2, [Perception]
			0xEB, 0x19,										//jmp OriginalFunction
			0x3D, 0xC4, 0x02, 0x00, 0x00,					//cmp eax, 000002C4
			0x75, 0x14,										//jne CharismaCheck
			0x31, 0xC0,										//xor eax, eax
			0x3B, 0x05, 0xB2, 0x00, 0x00, 0x00,				//cmp eax, [EnduranceEnabled]
			0x74, 0x0A,										//je CharismaCheck
			0xF3, 0x0F, 0x10, 0x15, 0xAC, 0x00, 0x00, 0x00,	//movss xmm2, [Endurance]
			0xEB, 0x19,										//jmp OriginalFunction
			0x3D, 0xC5, 0x02, 0x00, 0x00,					//cmp eax, 000002C5
			0x75, 0x14,										//jne IntelligenceCheck
			0x31, 0xC0,										//xor eax, eax
			0x3B, 0x05, 0x9F, 0x00, 0x00, 0x00,				//cmp eax, [CharismaEnabled]
			0x74, 0x0A,										//je IntelligenceCheck
			0xF3, 0x0F, 0x10, 0x15, 0x99, 0x00, 0x00, 0x00,	//movss xmm2, [Charisma]
			0xEB, 0x19,										//jmp OriginalFunction
			0x3D, 0xC6, 0x02, 0x00, 0x00,					//cmp eax, 000002C6
			0x75, 0x14,										//jne AgilityCheck
			0x31, 0xC0,										//xor eax, eax
			0x3B, 0x05, 0x8C, 0x00, 0x00, 0x00,				//cmp eax, [IntelligenceEnabled]
			0x74, 0x0A,										//je AgilityCheck
			0xF3, 0x0F, 0x10, 0x15, 0x86, 0x00, 0x00, 0x00,	//movss xmm2, [Intelligence]
			0xEB, 0x19,										//jmp OriginalFunction
			0x3D, 0xC7, 0x02, 0x00, 0x00,					//cmp eax, 000002C7
			0x75, 0x14,										//jne LuckCheck
			0x31, 0xC0,										//xor eax, eax
			0x3B, 0x05, 0x79, 0x00, 0x00, 0x00,				//cmp eax, [AgilityEnabled]
			0x74, 0x0A,										//je LuckCheck
			0xF3, 0x0F, 0x10, 0x15, 0x73, 0x00, 0x00, 0x00,	//movss xmm2, [Agility]
			0xEB, 0x19,										//jmp OriginalFunction
			0x3D, 0xC8, 0x02, 0x00, 0x00,					//cmp eax, 000002C8
			0x75, 0x14,										//jne OriginalFunction
			0x31, 0xC0,										//xor eax, eax
			0x3B, 0x05, 0x66, 0x00, 0x00, 0x00,				//cmp eax, [LuckEnabled]
			0x74, 0x0A,										//je OriginalFunction
			0xF3, 0x0F, 0x10, 0x15, 0x60, 0x00, 0x00, 0x00,	//movss xmm2, [Luck]
			0xEB, 0x00,										//jmp OriginalFunction
			0x48, 0x8D, 0x05, 0x5B, 0x00, 0x00, 0x00,		//lea rax, [OriginalFunction]
			0x48, 0x8B, 0x00,								//mov rax, [rax]
			0xFF, 0xE0,										//jmp rax
			0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	//Padding
			0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,	//Padding
			0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,				//Padding
		};
		int actionPointsEnabled{};
		float actionPoints{};
		int strengthEnabled{};
		float strength{};
		int perceptionEnabled{};
		float perception{};
		int enduranceEnabled{};
		float endurance{};
		int charismaEnabled{};
		float charisma{};
		int intelligenceEnabled{};
		float intelligence{};
		int agilityEnabled{};
		float agility{};
		int luckEnabled{};
		float luck{};
		std::uintptr_t originalFunction{};
	};

	class ActorValueInformation
	{
	public:
		std::uintptr_t vtable;//0x8
		char padding0008[0x18];
		std::uint32_t formId;//0x20
		char padding0024[0x1DC];
		float maximumValue;//0x200
	};

	static bool SetActorValueMaximum(std::uint32_t formId, float defaultValue, float customValue, bool enabled);

	inline static std::uintptr_t actorValuePage = 0;
	inline static bool actorValuePageValid = false;
};
